name: Build N1 OpenWrt Firmware-test
on:
  repository_dispatch:
  workflow_dispatch:
env:
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  FILE_NAME_TEMPLATE: "N1-Lean-Flippy-{{KERNEL_VERSION}}-{{FILE_DATE}}"
  WHOAMI_FIXED: |
    WHOAMI="Akatsuki"
    OPENWRT_VER="R25.8.1"
    DISTRIB_DESCRIPTION="Unicorn"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - flippy_name: k6.6
            kernel_series: 6.6.y
          - flippy_name: k6.12
            kernel_series: 6.12.y
    env:
      FLIPPY_NAME: ${{ matrix.flippy_name }}   
    steps:
    - name: 初始化环境与检出代码
      run: |
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")"  >> $GITHUB_ENV
        echo "FILE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        sudo apt-get update && sudo apt-get install -y jq pigz
        sudo mkdir -p /opt/kernel

    - name: 克隆openwrt_packit工具
      run: |
        sudo git clone https://github.com/unifreq/openwrt_packit /opt/openwrt_packit

    - name: 下载最新内核（适配flippy命名规则）
      id: download_kernel
      run: |
        RELEASE_URL="https://api.github.com/repos/ophub/kernel/releases/tag/kernel_flippy"
        ASSETS=$(curl -s $RELEASE_URL | jq -r '.assets[] | .name + "|" + .browser_download_url')
        KERNEL_SERIES="${{ matrix.kernel_series }}"
        VERSION_PATTERN=$(echo $KERNEL_SERIES | sed 's/\.y$//')
        LATEST_KERNEL=$(echo "$ASSETS" | grep -E "${VERSION_PATTERN}\.[0-9]+\-flippy\-[0-9]+\+" | grep "modules-" | sort -Vr | head -n 1)
    
        if [ -z "$LATEST_KERNEL" ]; then
          echo "未找到匹配的flippy内核: $VERSION_PATTERN"
          exit 1
        fi
    
        KERNEL_URL=$(echo "$LATEST_KERNEL" | cut -d'|' -f2)
        KERNEL_FILENAME=$(echo "$LATEST_KERNEL" | cut -d'|' -f1)
        KERNEL_VERSION=$(echo "$KERNEL_FILENAME" | sed -E 's/modules-(.*)-flippy-.*/\1/')
    
        wget -q --show-progress -O /opt/kernel/$KERNEL_FILENAME $KERNEL_URL
        tar -zxf /opt/kernel/$KERNEL_FILENAME -C /opt/kernel/
        rm -f /opt/kernel/$KERNEL_FILENAME
    
        sudo ln -s /opt/kernel/modules-$KERNEL_VERSION-flippy-* /opt/kernel/modules-$KERNEL_VERSION.tar.gz
    
        echo "KERNEL_VERSION=$KERNEL_VERSION" >> $GITHUB_ENV
        echo "已下载并链接内核: $KERNEL_FILENAME -> modules-$KERNEL_VERSION.tar.gz"

    - name: 准备构建环境
      run: |
        echo "${{ env.WHOAMI_FIXED }}" > /opt/openwrt_packit/whoami
        echo "KERNEL_VERSION=\"${{ env.KERNEL_VERSION }}\"" >> /opt/openwrt_packit/whoami
        cd /opt/openwrt_packit
        wget -q --show-progress https://github.com/MXJNZ6/op/releases/download/N1/openwrt-armsr-armv8-generic-rootfs.tar.gz

    - name: 构建OpenWrt镜像
      run: |
        sudo chmod -R 777 /opt
        mkdir /opt/openwrt_packit/tmp
        sudo mount -t tmpfs none /opt/openwrt_packit/tmp
        cd /opt/openwrt_packit
        sudo ./mk_s905d_n1.sh
        sudo cp files/openwrt-update-amlogic output/openwrt-update-amlogic
        cd output
        sudo pigz -9 -p 2 *
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: 上传与发布
      run: |
        FINAL_NAME=$(echo "${{ env.FILE_NAME_TEMPLATE }}" | \
          sed "s/{{KERNEL_VERSION}}/${{ env.KERNEL_VERSION }}/g" | \
          sed "s/{{FILE_DATE}}/${{ env.FILE_DATE }}/g")
        echo "FILE_NAME=${FINAL_NAME}" >> $GITHUB_ENV

    - name: 上传制品
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_NAME }}
        path: ${{ env.FIRMWARE }}

    - name: 创建Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.FILE_NAME }}
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          OpenWrt 固件 for N1（内核：${{ env.KERNEL_VERSION }}）
          包含完整内核组件
          默认登录：192.168.1.1 | root / password
        artifacts: ${{ env.FIRMWARE }}/*

  notify:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Telegram通知
      run: |
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d \
        "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=固件编译完成：${{ env.FILE_NAME }}"

    - name: 清理旧工作流
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 0
