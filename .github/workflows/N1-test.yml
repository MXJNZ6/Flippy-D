name: Build N1 OpenWrt Firmware-test
on:
  repository_dispatch:
  workflow_dispatch:
env:
  UPLOAD_FIRMWARE: true
  TZ: Asia/Shanghai
  FILE_NAME_TEMPLATE: "N1-Lean-Flippy-{{KERNEL_VERSION}}-{{FILE_DATE}}"
  WHOAMI_FIXED: |
    WHOAMI="Akatsuki"
    OPENWRT_VER="R25.8.1"
    DISTRIB_DESCRIPTION="Unicorn"

jobs:
  build:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        include:
          - flippy_name: k6.6
            kernel_version: 6.6.y
            kernel_sign: -flippy-93+
          - flippy_name: k6.12
            kernel_version: 6.12.y
            kernel_sign: -flippy-93+
    env:
      FLIPPY_NAME: ${{ matrix.flippy_name }}   
    steps:
    - name: Checkout Code
      uses: actions/checkout@main

    - name: Initialize Environment
      run: |     
        echo "DATE=$(date "+%Y-%m-%d %H:%M:%S")"  >> $GITHUB_ENV
        echo "FILE_DATE=$(date +%Y%m%d)" >> $GITHUB_ENV
        sudo mkdir -p /opt/kernel

    - name: Compile Kernel
      id: compile_kernel
      uses: ophub/amlogic-s9xxx-armbian@main
      with:
        build_target: kernel
        kernel_version: ${{ matrix.kernel_version }}
        kernel_auto: true
        kernel_sign: ${{ matrix.kernel_sign }}
        output_path: ./compiled_kernel

    - name: Verify Kernel Compilation
      run: |
        BOOT_FILE=$(ls ./compiled_kernel/boot-*.tar.gz 2>/dev/null | head -n 1)
        if [[ -z "${BOOT_FILE}" ]]; then
          echo "错误：未找到内核文件，编译失败！"
          exit 1
        fi
        KERNEL_VERSION=$(basename ${BOOT_FILE} | sed 's/boot-//;s/.tar.gz//')
        echo "KERNEL_VERSION=${KERNEL_VERSION}" >> $GITHUB_ENV
        echo "内核版本：${KERNEL_VERSION}"

    - name: Clone openwrt_packit
      run: |
        cd /opt && git clone https://github.com/unifreq/openwrt_packit

    - name: Generate whoami File
      run: |
        echo "${{ env.WHOAMI_FIXED }}" > /opt/openwrt_packit/whoami
        echo "KERNEL_VERSION=\"${{ env.KERNEL_VERSION }}\"" >> /opt/openwrt_packit/whoami
        echo "whoami 内容："
        cat /opt/openwrt_packit/whoami

    - name: Copy All Kernel Files
      run: |
        COMPILED_DIR=./compiled_kernel
        sudo cp -r "${COMPILED_DIR}"/* /opt/kernel/

    - name: Download Rootfs
      run: |
        cd /opt/openwrt_packit
        wget -q --show-progress https://github.com/MXJNZ6/op/releases/download/N1/openwrt-armsr-armv8-generic-rootfs.tar.gz

    - name: Build OpenWrt Image
      run: |
        sudo chmod -R 777 /opt
        mkdir /opt/openwrt_packit/tmp
        sudo mount -t tmpfs none /opt/openwrt_packit/tmp
        cd /opt/openwrt_packit
        sudo ./mk_s905d_n1.sh
        sudo cp files/openwrt-update-amlogic output/openwrt-update-amlogic

    - name: Compress Output
      id: pigz
      run: |
        cd /opt/openwrt_packit/output
        sudo pigz -9 -p 2 *
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Organize Artifacts
      run: |
        cd /opt/openwrt_packit/output
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV

    - name: Set Final File Name
      run: |
        FINAL_NAME=$(echo "${{ env.FILE_NAME_TEMPLATE }}" | \
          sed "s/{{KERNEL_VERSION}}/${{ env.KERNEL_VERSION }}/g" | \
          sed "s/{{FILE_DATE}}/${{ env.FILE_DATE }}/g")
        echo "FILE_NAME=${FINAL_NAME}" >> $GITHUB_ENV
        echo "最终命名：${FINAL_NAME}"

    - name: Upload Artifact
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.FILE_NAME }}
        path: ${{ env.FIRMWARE }}

    - name: Create Release
      uses: ncipollo/release-action@v1
      with:
        name: ${{ env.FILE_NAME }}
        tag: ${{ env.FILE_NAME }}
        token: ${{ secrets.GITHUB_TOKEN }}
        body: |
          OpenWrt 固件 for N1（内核：${{ env.KERNEL_VERSION }}）
          包含完整内核组件
          默认登录：192.168.1.1 | root / password
        artifacts: ${{ env.FIRMWARE }}/*

  notify:
    needs: [build]
    runs-on: ubuntu-latest
    steps:
    - name: Telegram Notification
      run: |
        curl "https://api.telegram.org/bot${{ secrets.TELEGRAM_BOT_TOKEN }}/sendMessage" -d \
        "chat_id=${{ secrets.TELEGRAM_CHAT_ID }}&text=固件编译完成：${{ env.FILE_NAME }}"

    - name: Cleanup Old Runs
      uses: Mattraks/delete-workflow-runs@v2
      with:
        token: ${{ github.token }}
        repository: ${{ github.repository }}
        retain_days: 0
        keep_minimum_runs: 0
